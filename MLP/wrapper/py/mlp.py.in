#!/usr/bin/env python
# -*- coding: utf-8 -*-

import ctypes

def enum(*args):
    values = dict(zip(args, range(len(args))))
    return type('Enum', (), values)

class Loader:
    def __init__(self, lib):
        self._libc = ctypes.CDLL(lib)

    def wrap(self, funcname, restype, argtypes):
        func = self._libc.__getattr__(funcname)
        func.restype = restype
        func.argtypes = argtypes
        return func

    def load(self):
        raise NotImplementedError

class MLPLoader(Loader):
    def __init__(self):
        Loader.__init__(self, '${CMAKE_INSTALL_PREFIX}/lib/libMLP.so')

        self._funcnames = enum('TRAINER_NEW',
                                  'TRAINER_DELETE',
                                  'TRAINER_CONFIGURE',
                                  'TRAINER_IS_RUNNING',
                                  'TRAINER_GET_PROGRESS',
                                  'TRAINER_RUN',
                                  'TRAINER_ERROR',
                                  'NETWORK_NEW',
                                  'NETWORK_DELETE',
                                  'NETWORK_SERIALIZE',
                                  'NETWORK_DESERIALIZE',
                                  'NETWORK_PREDICT',
                                  'NETWORK_GET_OUTPUT',
                                  'NETWORK_GET_OUTPUT_LENGTH')

        self._number_of_functions = (self._funcnames.NETWORK_GET_OUTPUT_LENGTH - self._funcnames.TRAINER_NEW + 1)

        self._api = [   ['mlp_trainer_new',                 ctypes.c_void_p,    [ctypes.c_char_p, ctypes.c_char_p]],
                        ['mlp_trainer_delete',              None,               [ctypes.c_void_p]],
                        ['mlp_trainer_configure',           None,               [ctypes.c_void_p, ctypes.c_char_p]],
                        ['mlp_trainer_is_running',          ctypes.c_ubyte,     [ctypes.c_void_p]],
                        ['mlp_trainer_get_progress',        ctypes.c_float,     [ctypes.c_void_p]],
                        ['mlp_trainer_run',                 None,               [ctypes.c_void_p]],
                        ['mlp_trainer_error',               ctypes.c_float,     [ctypes.c_void_p]],
                        ['mlp_network_new',                 ctypes.c_void_p,    [ctypes.c_char_p]],
                        ['mlp_network_delete',              None,               [ctypes.c_void_p]],
                        ['mlp_network_serialize',           None,               [ctypes.c_void_p, ctypes.c_char_p]],
                        ['mlp_network_deserialize',         None,               [ctypes.c_void_p, ctypes.c_char_p]],
                        ['mlp_network_predict',             None,               [ctypes.c_void_p, ctypes.c_uint, ctypes.c_void_p]],
                        ['mlp_network_get_output',          ctypes.c_void_p,    [ctypes.c_void_p]],
                        ['mlp_network_get_output_length',   ctypes.c_uint,      [ctypes.c_void_p]]]

        self._funcs = {}

        self.load()

    def load(self):
        for i in range(self._number_of_functions):
            self._funcs[i] = self.wrap(self._api[i][0],
                                        self._api[i][1],
                                        self._api[i][2])

if __name__ == '__main__':
    l = MLPLoader()
